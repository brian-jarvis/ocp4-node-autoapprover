
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: system:node-bootstrap-autoapprover
rules:
- apiGroups:
  - certificates.k8s.io
  resources:
  - certificatesigningrequests
  verbs:
  - delete
  - get
  - list
  - watch
- apiGroups:
  - certificates.k8s.io
  resources:
  - certificatesigningrequests/approval
  verbs:
  - create
  - update
---
kind: ServiceAccount
apiVersion: v1
metadata:
  name: bootstrap-autoapprover
  namespace: openshift-infra
---
kind: ImageStream
apiVersion: image.openshift.io/v1
metadata:
  name: ose-cli
  namespace: openshift-infra
spec:
  lookupPolicy:
    local: true
  tags:
    - name: 'latest'
      annotations: null
      from:
        kind: DockerImage
        name: 'registry.redhat.io/openshift4/ose-cli:latest'
      importPolicy:
        scheduled: true
      referencePolicy:
        type: Local
# ---
# apiVersion: image.openshift.io/v1
# kind: ImageStreamTag
# metadata:
#   name: ose-cli:latest
#   namespace: openshift-infra
# tag:
#   reference: true
#   from:
#     kind: DockerImage
#     name: openshift/ose-cli:latest
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: bootstrap-autoapprover
subjects:
  - kind: ServiceAccount
    name: bootstrap-autoapprover
    namespace: openshift-infra
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: 'system:node-bootstrap-autoapprover'
---
kind: StatefulSet
apiVersion: apps/v1
metadata:
  name: bootstrap-autoapprover
  namespace: openshift-infra
  annotations:
    image.openshift.io/triggers: |
      [{"from":{"kind":"ImageStreamTag","name":"ose-cli:latest"},"fieldPath":"spec.template.spec.containers[?(@.name==\"signer\")].image"}]
spec:
  selector:
    matchLabels:
      app: bootstrap-autoapprover
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: bootstrap-autoapprover
    spec:
      nodeSelector:
        node-role.kubernetes.io/master: ''
      serviceAccountName: 'bootstrap-autoapprover'
      tolerations:
      - key: node-role.kubernetes.io/master
        operator: Exists
        effect: NoSchedule
      terminationGracePeriodSeconds: 1
      containers:
      - name: signer
        image: " "
        command:
        - /bin/bash
        - -c
        args:
        - |
          #!/bin/bash
          set -o errexit
          set -o nounset
          set -o pipefail
          unset KUBECONFIG
          cat <<SCRIPT > /tmp/signer
          #!/bin/bash
          #
          # It will approve any CSR that is not approved yet, and delete any CSR that expired more than 60 seconds
          # ago.
          #
          set -o errexit
          set -o nounset
          set -o pipefail
          name=\${1}
          condition=\${2}
          certificate=\${3}
          username=\${4}
          # auto approve
          if [[ -z "\${condition}" && ("\${username}" == "system:serviceaccount:openshift-infra:node-bootstrapper" || "\${username}" == "system:node:"* || "\${username}" == "system:admin" ) ]]; then
            oc adm certificate approve "\${name}"
            exit 0
          fi
          # # check certificate age
          ## The ose-cli image does not have openssl in it.  there is no harm in approving.
          # if [[ -n "\${certificate}" ]]; then
          #   text="\$( echo "\${certificate}" | base64 -d - )"
          #   if ! echo "\${text}" | openssl x509 -noout; then
          #     echo "error: Unable to parse certificate" 2>&1
          #     exit 1
          #   fi
          #   if ! echo "\${text}" | openssl x509 -checkend -60 > /dev/null; then
          #     echo "Certificate is expired, deleting"
          #     oc delete csr "\${name}"
          #   fi
          #   exit 0
          # fi
          SCRIPT
          chmod u+x /tmp/signer
          exec oc observe csr --maximum-errors=1 --resync-period=10m -a '{.status.conditions[*].type}' -a '{.status.certificate}' -a '{.spec.username}' -- /tmp/signer